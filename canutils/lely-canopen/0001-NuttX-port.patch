diff --git a/include/lely/co/val.h b/include/lely/co/val.h
index f68b093b..b0b5dc8a 100644
--- a/include/lely/co/val.h
+++ b/include/lely/co/val.h
@@ -28,7 +28,7 @@
 #include <float.h>
 #include <stddef.h>
 
-#if !LELY_NO_CO_DCF || !LELY_NO_CO_OBJ_FILE
+#if !LELY_NO_STDIO
 // The read file buffer from <lely/util/frbuf.h>
 struct __frbuf;
 // The write file buffer from <lely/util/fwbuf.h>
diff --git a/include/lely/libc/uchar.h b/include/lely/libc/uchar.h
index d1918f1b..45dc3841 100644
--- a/include/lely/libc/uchar.h
+++ b/include/lely/libc/uchar.h
@@ -26,7 +26,7 @@
 
 #ifndef LELY_HAVE_UCHAR_H
 #if (__STDC_VERSION__ >= 201112L || __cplusplus >= 201103L) \
-		&& !defined(__NEWLIB__)
+		&& !defined(__NEWLIB__) && !defined(__NuttX__)
 #define LELY_HAVE_UCHAR_H 1
 #endif
 #endif
diff --git a/src/can/socket.c b/src/can/socket.c
index 4fc133dd..a35b281e 100644
--- a/src/can/socket.c
+++ b/src/can/socket.c
@@ -39,6 +39,10 @@
 #include <linux/can/error.h>
 #endif
 
+#ifdef __NuttX__
+#include <nuttx/can.h>
+#endif
+
 int
 can_frame_is_error(const struct can_frame *frame, enum can_state *pstate,
 		enum can_error *perror)
@@ -51,7 +55,7 @@ can_frame_is_error(const struct can_frame *frame, enum can_state *pstate,
 	enum can_state state = pstate ? *pstate : CAN_STATE_ACTIVE;
 	enum can_error error = perror ? *perror : 0;
 
-#ifdef HAVE_LINUX_CAN_ERROR_H
+#if defined(HAVE_LINUX_CAN_ERROR_H) || defined(__NuttX__)
 	if (frame->can_dlc != CAN_ERR_DLC) {
 		set_errnum(ERRNUM_INVAL);
 		return -1;
diff --git a/src/io/can.c b/src/io/can.c
index ca7e7d95..6d76b07d 100644
--- a/src/io/can.c
+++ b/src/io/can.c
@@ -26,7 +26,7 @@
 #if !LELY_NO_STDIO
 
 #include <lely/util/errnum.h>
-#if !LELY_NO_CAN && defined(__linux__) && HAVE_LINUX_CAN_H
+#if !LELY_NO_CAN && ((defined(__linux__) && HAVE_LINUX_CAN_H) || defined(__NuttX__))
 #include <lely/can/socket.h>
 #endif
 #include "handle.h"
@@ -38,7 +38,7 @@
 #include <assert.h>
 #include <string.h>
 
-#if defined(__linux__) && HAVE_LINUX_CAN_H
+#if (defined(__linux__) && HAVE_LINUX_CAN_H) || defined(__NuttX__)
 
 #ifdef HAVE_LINUX_CAN_ERROR_H
 #include <linux/can/error.h>
@@ -56,6 +56,12 @@
 #include <linux/can/raw.h>
 #endif
 
+#ifdef __NuttX__
+#include <sys/ioctl.h>
+#include <nuttx/can.h>
+#include <net/if.h>
+#endif
+
 /// A CAN device.
 struct can {
 	/// The I/O device base handle.
@@ -656,6 +662,88 @@ io_can_set_txqlen(io_handle_t handle, size_t txqlen)
 
 #endif // HAVE_LINUX_CAN_NETLINK_H && HAVE_LINUX_RTNETLINK_H
 
+#if defined(__NuttX__)
+int
+io_can_get_ec(io_handle_t handle, uint16_t *ptxec, uint16_t *prxec)
+{
+  /* tx error count */
+
+  *ptxec = 0;
+
+  /* rx error count */
+
+  *prxec = 0;
+
+  return 0;
+}
+
+int
+io_can_get_bitrate(io_handle_t handle, uint32_t *pbitrate)
+{
+	if (!handle) {
+		errno = EBADF;
+		return -1;
+	}
+
+	if (handle->vtab != &can_vtab) {
+		errno = ENXIO;
+		return -1;
+	}
+	struct can *can = (struct can *)handle;
+  struct ifreq ifr;
+  if_indextoname(can->ifindex, ifr.ifr_name);
+
+  if (ioctl(handle->fd, SIOCGCANBITRATE, &ifr) == -1) {
+		return -1;
+	}
+
+  *pbitrate = ifr.ifr_ifru.ifru_can_data.arbi_bitrate * 1000;
+
+  return 0;
+}
+
+int
+io_can_set_bitrate(io_handle_t handle, uint32_t bitrate)
+{
+	if (!handle) {
+		errno = EBADF;
+		return -1;
+	}
+
+	if (handle->vtab != &can_vtab) {
+		errno = ENXIO;
+		return -1;
+	}
+	struct can *can = (struct can *)handle;
+  struct ifreq ifr;
+  if_indextoname(can->ifindex, ifr.ifr_name);
+
+  ifr.ifr_ifru.ifru_can_data.arbi_bitrate = bitrate / 1000;
+  ifr.ifr_ifru.ifru_can_data.data_bitrate = bitrate / 1000;
+  ifr.ifr_ifru.ifru_can_data.arbi_samplep = 0;
+  ifr.ifr_ifru.ifru_can_data.data_samplep = 0;
+
+  if (ioctl(handle->fd, SIOCSCANBITRATE, &ifr) == -1) {
+		return -1;
+	}
+
+  return 0;
+}
+
+int
+io_can_get_txqlen(io_handle_t handle, size_t *ptxqlen)
+{
+  return -1;
+}
+
+int
+io_can_set_txqlen(io_handle_t handle, size_t txqlen)
+{
+  return -1;
+}
+
+#endif // __NuttX__
+
 static void
 can_fini(struct io_handle *handle)
 {
diff --git a/src/io/poll.c b/src/io/poll.c
index d474e337..e07b36ce 100644
--- a/src/io/poll.c
+++ b/src/io/poll.c
@@ -261,7 +261,7 @@ io_poll_watch(io_poll_t *poll, io_handle_t handle, struct io_event *event,
 
 	assert(handle->vtab);
 	switch (handle->vtab->type) {
-#if defined(__linux__) && defined(HAVE_LINUX_CAN_H)
+#if (defined(__linux__) && defined(HAVE_LINUX_CAN_H)) || defined(__NuttX__)
 	case IO_TYPE_CAN:
 #endif
 #if _POSIX_C_SOURCE >= 200112L
diff --git a/src/util/frbuf.c b/src/util/frbuf.c
index e01b7677..080ef665 100644
--- a/src/util/frbuf.c
+++ b/src/util/frbuf.c
@@ -75,7 +75,7 @@ struct __frbuf {
 void *
 __frbuf_alloc(void)
 {
-	void *ptr = malloc(sizeof(struct __frbuf));
+	void *ptr = zalloc(sizeof(struct __frbuf));
 	if (!ptr)
 		set_errc(errno2c(errno));
 	return ptr;
diff --git a/tools/coctl.c b/tools/coctl.c
index 351b81c0..5889d44f 100644
--- a/tools/coctl.c
+++ b/tools/coctl.c
@@ -39,6 +39,8 @@
 #include <signal.h>
 #include <stdlib.h>
 #include <string.h>
+#include <inttypes.h>
+#include <system/readline.h>
 
 #if _WIN32
 #include <io.h>
@@ -90,7 +92,7 @@ int io_thrd_start(void *arg);
 void co_net_err(struct co_net *net);
 
 struct co_net net[CO_GW_NUM_NET];
-io_poll_t *poll;
+static io_poll_t *poll;
 
 int flags;
 int inhibit = INHIBIT;
@@ -315,8 +317,8 @@ main(int argc, char *argv[])
 	errno = errsv;
 	int eof = 0;
 
-	char *line = NULL;
-	size_t n = 0;
+#define LINE_SIZE 100
+	char line[LINE_SIZE];
 	co_unsigned32_t seq = 1;
 	char *cmd = NULL;
 	while (!done) {
@@ -358,11 +360,11 @@ main(int argc, char *argv[])
 			if (cmd)
 				printf("... ");
 			else
-				printf("[%u] ", seq);
+				printf("[%" PRIu32 "] ", seq);
 			fflush(stdout);
 		}
 		// Keep reading lines until end-of-file.
-		if (getline(&line, &n, stdin) == -1) {
+		if (readline_stream(line, LINE_SIZE-1, stdin, stdout) == -1) {
 			if (tty)
 				fputc('\n', stdout);
 			if (ferror(stdin)) {
@@ -409,7 +411,7 @@ main(int argc, char *argv[])
 				free(cmd);
 				cmd = tmp;
 			} else {
-				if (asprintf(&cmd, "[%u] %s", seq, line)
+				if (asprintf(&cmd, "[%" PRIu32 "] %s", seq, line)
 						== -1) {
 					cmd = NULL;
 					break;
@@ -431,7 +433,7 @@ main(int argc, char *argv[])
 					result = asprintf(&tmp, "%s%s%s",
 							recv_buf, cmd, line);
 				else
-					result = asprintf(&tmp, "%s[%u] %s",
+					result = asprintf(&tmp, "%s[%" PRIu32 "] %s",
 							recv_buf, seq, line);
 				if (result < 0) {
 					mtx_unlock(&recv_mtx);
@@ -444,7 +446,7 @@ main(int argc, char *argv[])
 					result = asprintf(&recv_buf, "%s%s",
 							cmd, line);
 				else
-					result = asprintf(&recv_buf, "[%u] %s",
+					result = asprintf(&recv_buf, "[%" PRIu32 "] %s",
 							seq, line);
 				if (result < 0) {
 					recv_buf = NULL;
@@ -466,7 +468,6 @@ main(int argc, char *argv[])
 		}
 	}
 	free(cmd);
-	free(line);
 
 	io_poll_signal(poll, 1);
 	thrd_join(thr, NULL);
@@ -561,7 +562,7 @@ gw_rate(co_unsigned16_t id, co_unsigned16_t rate, void *data)
 		return;
 	bitrate = rate * 1000;
 	if (io_can_set_bitrate(net[id - 1].handle, bitrate) == -1)
-		diag(DIAG_ERROR, 0, "unable to set bitrate of %s to %u bit/s",
+		diag(DIAG_ERROR, 0, "unable to set bitrate of %s to %" PRIu32 " bit/s",
 				net[id - 1].can_path, bitrate);
 }
 
